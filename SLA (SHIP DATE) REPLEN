DECLARE @HJStart as DATE
DECLARE @HJEnd  as DATE
DECLARE @CFStart as DATE
DECLARE @CFEnd  as DATE
DECLARE @proactive as INT
DECLARE @building1 AS NVARCHAR(20)
DECLARE @building2 AS NVARCHAR(20)
DECLARE @multiplier AS INT
DECLARE @SLA AS DATETIME
DECLARE @SLAON AS INT
​
--@SLAON = 0 runs the HJ DATE and COFE DATE Replen Query | @SLAON = 1 runs the latest_ship_date Replen Query + COFE DATE)
​
​
SET @multiplier = '1'
SET @SLA = '2023-04-25 20:00:00.000' --Change only the date to the shipdate you are working on
SET @SLAON = 1 --IF THIS IS 1, @SLA must be changed above based on latest_ship_date/priority query as well as the COFE Dates Below*/ -- IF THIS IS 0, change the date ranges below like normal.
​
-- Input the date Ranges and Proactive Below instead of the end --
SET @HJStart = '2022-09-25' /* <<< HJ Start Date*/ SET @HJEnd = '2022-09-25' /* <<< HJ End Date*/
SET @CFStart = '2022-09-25' /* <<< COFE Start Date*/ SET @CFEnd = '2022-09-25' /* <<< COFE End Date*/
SET @proactive = '0' -- Proactive Number --
SET @building1 = 'BS-%' /* Parameter for Buildings */  SET @building2 = 'RB-%' --Example: Building1 = RB and Building 2 = RB Only RIM--
​
IF @SLAON = 1
​
BEGIN
​
select
 e.item_number, e.order_qty, e.picked_qty, e.qty_needed, e.pm_qty, e.bs_qty, e.scrb_qty, e.stg_qty, e.total_qty,
 e.location_id, e.hu_id, e.item_number, e.actual_qty,
 (case when m.size = 'OS' then 'OS' else 'NOT OS' end) SFS,
 (case
  when pm_qty < qty_needed and FDE1 > 0 then 'Critical'
  when pm_qty < qty_needed then 'Urgent'
  when pm_qty = qty_needed then 'Demand'
  else 'Proactive' end) replen_status,
   m.size,
 (case when location_id like 'RB-%' then 'RIM'
  when location_id like 'SV-%' or location_id like 'SC-%' then 'SEVILLE'
  when location_id like 'BS-%' then 'SFS' end) building
  --m.style, m.color,
from
 (
  select  *,
   (CASE
     WHEN runningTotal + pm_qty + stg_qty - actual_qty < qty_needed THEN 'PULL'
	 WHEN runningTotal + pm_qty + stg_qty - actual_qty > qty_needed  THEN 'DELETE'
	 WHEN runningTotal + pm_qty + stg_qty - actual_qty = qty_needed THEN 'PULL'
    ELSE 'DELETE' END
   ) AS 'replen'
  from
  (
   SELECT *,
    SUM (actual_qty) OVER (PARTITION BY item_number ORDER BY rowNumber) AS runningTotal
   from
   (
    select
     b.item_number, order_qty, picked_qty, (b.qty_needed)*@multiplier qty_needed, pm_qty, bs_qty, scrb_qty, stg_qty, total_qty,
	 i.location_id, i.hu_id, i.actual_qty, i.status, i.type, FDE1,
	 ROW_NUMBER () OVER ( PARTITION BY i.item_number ORDER BY i.item_number DESC, i.location_id ASC ) AS 'rowNumber'
    from
    (
	 select
	  item_number, order_qty, picked_qty, order_qty - picked_qty qty_needed, pm_qty, bs_qty, scrb_qty, stg_qty,
      pm_qty + bs_qty + scrb_qty + stg_qty total_qty, FDE1
	 from
     (
	select * from
(select
item_number,
isnull(sum(case when status_check = 'IMPORTED' then order_qty end),0) order_qty_imported,
isnull(count(case when status_check = 'RELEASED' then order_qty end),0) order_qty_released,
isnull(sum(case when status_check = 'IMPORTED' then order_qty end),0) + isnull(count(case when status_check = 'RELEASED' then order_qty end),0) order_qty,
sum(picked_qty) picked_qty,
count(distinct (case when carrier_code in ('FDE1', '1DAY') then order_number end)) 'FDE1',
	isnull((
		  SELECT sum(isnull(pm.actual_qty,0)) AS pm_qty
		  FROM t_stored_item pm (nolock)
		  WHERE type = '0'
		  AND (location_id LIKE 'AA%' OR location_id LIKE 'AB%' OR location_id LIKE 'AC%' OR location_id LIKE 'AD%')
		  AND pm.item_number = a1.item_number
		  AND status = 'A'
		  GROUP BY item_number
		  ), 0) pm_qty,
		 isnull((
		  SELECT sum(isnull(actual_qty,0)) AS bs_qty
		  FROM t_stored_item bs (nolock)
		  WHERE type = '0'
		  AND (location_id LIKE 'BS-%')
		  AND bs.item_number = a1.item_number
		  GROUP BY item_number
		 ),0) bs_qty,
		 isnull((
		  SELECT sum(isnull(actual_qty,0)) AS scrb_qty
		  FROM t_stored_item scrb (nolock)
		  WHERE type = '0'
		  AND (location_id LIKE 'SC-%'
		  OR location_id LIKE 'SV-%'
		  OR location_id LIKE 'RB-%')
		  AND scrb.item_number = a1.item_number
		 GROUP BY item_number
         ),0) scrb_qty,
		 isnull((
		  SELECT sum(isnull(actual_qty,0)) AS stg_qty
		  FROM t_stored_item stg (nolock)
		  WHERE type = '0'
		  AND status = 'A'
		  AND (location_id LIKE 'CP%'
		  OR location_id LIKE 'OS%'
		  OR location_id LIKE 'RCV%'
		  OR location_id LIKE 'RESTOCKER%'
		  OR location_id LIKE 'CART%'
		  OR location_id LIKE 'SFS%'
		  OR location_id LIKE 'REC%'
		  OR location_id LIKE 'TRANS%'
		  OR location_id LIKE 'INV%'
		  OR location_id LIKE 'RIM%'
		  OR location_id LIKE '[1-9]%')
		  AND stg.item_number = a1.item_number
		  GROUP BY item_number
		 ),0) stg_qty
from
(select ord.order_number, ord.item_number, ord.qty order_qty,
isnull(pkd.planned_quantity,0) planned_qty, isnull(pkd.picked_quantity,0) picked_qty,
(case when pkd.planned_quantity is null then 'IMPORTED' else 'RELEASED' end) status_check,
io.carrier_code from t_order_detail ord (nolock)
join t_order orm (nolock) on orm.order_number = ord.order_number
left join t_pick_detail pkd (nolock) on pkd.order_number = ord.order_number and pkd.line_number = ord.line_number and pkd.item_number = ord.item_number
left join t_import_order io (nolock) on io.order_number = ord.order_number and (io.carrier_code = 'FDE1' or io.carrier_code = '1DAY')
		where
	   (
		(orm.latest_ship_date <= @SLA) -- General Date Range (ALL in HJ)
		or
		(cast(orm.order_date as date) between @CFStart and @CFEnd -- COFE Released Orders
	     and wcs_status in ('A', 'R', 'M', 'P', 'S', 'C')  --All Cofe
		--and wcs_status in ('A') --Cofe Pending
		--and wcs_status in ('R', 'M', 'P', 'S', 'C') --Cofe Active Pool
		--and wcs_status in ('M','S') --Cofe Matching
		)
	   )
		and orm.status NOT IN ('SHIPPED','CANCELLED','PACKED','LOADED','S', 'PROCESSING', 'SHIPPING')
		and orm.order_type in ('ECOM', 'SM', 'EO')
		) a1
group by item_number) a2
where order_qty - picked_qty > 0
		) a
     where
	 (bs_qty > 0 or scrb_qty > 0) -- Bulk locations qty check (SFS only or include RB/SEV)
	 and pm_qty - @proactive < (order_qty - picked_qty) -- Change qty to check for proactive
	  ) b
     join t_stored_item i (nolock) on i.item_number = b.item_number and i.type = '0'
	 AND (i.location_id LIKE @building1  or i.location_id like @building2) -- Bulk locations (SFS only or include RB/SEV)
	 ) c
	) d
where (CASE
     WHEN runningTotal + pm_qty + stg_qty - actual_qty < qty_needed THEN 'PULL'
	 WHEN runningTotal + pm_qty + stg_qty - actual_qty > qty_needed  THEN 'DELETE'
	 WHEN runningTotal + pm_qty + stg_qty - actual_qty = qty_needed THEN 'PULL'
    ELSE 'DELETE' END
   ) <> 'DELETE'
   ) e
join t_item_master m (nolock) on m.item_number = e.item_number
ORDER BY replen_status desc, e.item_number, rowNumber
​
END
​
ELSE
​
BEGIN
​
select
 e.item_number, e.order_qty, e.picked_qty, e.qty_needed, e.pm_qty, e.bs_qty, e.scrb_qty, e.stg_qty, e.total_qty,
 e.location_id, e.hu_id, e.item_number, e.actual_qty,
 (case when m.size = 'OS' then 'OS' else 'NOT OS' end) SFS,
 (case
  when pm_qty < qty_needed and FDE1 > 0 then 'Critical'
  when pm_qty < qty_needed then 'Urgent'
  when pm_qty = qty_needed then 'Demand'
  else 'Proactive' end) replen_status,
   m.size,
 (case when location_id like 'RB-%' then 'RIM'
  when location_id like 'SV-%' or location_id like 'SC-%' then 'SEVILLE'
  when location_id like 'BS-%' then 'SFS' end) building
  --m.style, m.color
from
 (
  select  *,
   (CASE
     WHEN runningTotal + pm_qty + stg_qty - actual_qty < qty_needed THEN 'PULL'
	 WHEN runningTotal + pm_qty + stg_qty - actual_qty > qty_needed  THEN 'DELETE'
	 WHEN runningTotal + pm_qty + stg_qty - actual_qty = qty_needed THEN 'PULL'
    ELSE 'DELETE' END
   ) AS 'replen'
  from
  (
   SELECT *,
    SUM (actual_qty) OVER (PARTITION BY item_number ORDER BY rowNumber) AS runningTotal
   from
   (
    select
     b.item_number, order_qty, picked_qty, (b.qty_needed)*@multiplier qty_needed, pm_qty, bs_qty, scrb_qty, stg_qty, total_qty,
	 i.location_id, i.hu_id, i.actual_qty, i.status, i.type, FDE1,
	 ROW_NUMBER () OVER ( PARTITION BY i.item_number ORDER BY i.item_number DESC, i.location_id ASC ) AS 'rowNumber'
    from
    (
	 select
	  item_number, order_qty, picked_qty, order_qty - picked_qty qty_needed, pm_qty, bs_qty, scrb_qty, stg_qty,
      pm_qty + bs_qty + scrb_qty + stg_qty total_qty, FDE1
	 from
     (
	select * from
(select
item_number,
isnull(sum(case when status_check = 'IMPORTED' then order_qty end),0) order_qty_imported,
isnull(count(case when status_check = 'RELEASED' then order_qty end),0) order_qty_released,
isnull(sum(case when status_check = 'IMPORTED' then order_qty end),0) + isnull(count(case when status_check = 'RELEASED' then order_qty end),0) order_qty,
sum(picked_qty) picked_qty,
count(distinct (case when (carrier_code = 'FDE1' or carrier_code = '1DAY') then order_number end)) 'FDE1',
	isnull((
		  SELECT sum(isnull(pm.actual_qty,0)) AS pm_qty
		  FROM t_stored_item pm (nolock)
		  WHERE type = '0'
		  AND (location_id LIKE 'AA%' OR location_id LIKE 'AB%' OR location_id LIKE 'AC%' OR location_id LIKE 'AD%')
		  AND pm.item_number = a1.item_number
		  AND status = 'A'
		  GROUP BY item_number
		  ), 0) pm_qty,
		 isnull((
		  SELECT sum(isnull(actual_qty,0)) AS bs_qty
		  FROM t_stored_item bs (nolock)
		  WHERE type = '0'
		  AND (location_id LIKE 'BS-%')
		  AND bs.item_number = a1.item_number
		  GROUP BY item_number
		 ),0) bs_qty,
		 isnull((
		  SELECT sum(isnull(actual_qty,0)) AS scrb_qty
		  FROM t_stored_item scrb (nolock)
		  WHERE type = '0'
		  AND (location_id LIKE 'SC-%'
		  OR location_id LIKE 'SV-%'
		  OR location_id LIKE 'RB-%')
		  AND scrb.item_number = a1.item_number
		 GROUP BY item_number
         ),0) scrb_qty,
		 isnull((
		  SELECT sum(isnull(actual_qty,0)) AS stg_qty
		  FROM t_stored_item stg (nolock)
		  WHERE type = '0'
		  AND (location_id LIKE 'CP%'
		  OR location_id LIKE 'OS%'
		  OR location_id LIKE 'RCV%'
		  OR location_id LIKE 'RESTOCKER%'
		  OR location_id LIKE 'CART%'
		  OR location_id LIKE 'SFS%'
		  OR location_id LIKE 'REC%'
		  OR location_id LIKE 'TRANS%'
		  OR location_id LIKE 'INV%'
		  OR location_id LIKE 'RIM%'
		  OR location_id LIKE '[1-9]%')
		  AND stg.item_number = a1.item_number
		  GROUP BY item_number
		 ),0) stg_qty
from
(select ord.order_number, ord.item_number, ord.qty order_qty,
isnull(pkd.planned_quantity,0) planned_qty, isnull(pkd.picked_quantity,0) picked_qty,
(case when pkd.planned_quantity is null then 'IMPORTED' else 'RELEASED' end) status_check,
io.carrier_code from t_order_detail ord (nolock)
join t_order orm (nolock) on orm.order_number = ord.order_number
left join t_pick_detail pkd (nolock) on pkd.order_number = ord.order_number and pkd.line_number = ord.line_number and pkd.item_number = ord.item_number
left join t_import_order io (nolock) on io.order_number = ord.order_number and (io.carrier_code = 'FDE1' or io.carrier_code = '1DAY')
		where
	   (
		(cast(orm.order_date as date) between @HJStart and @HJEnd) -- General Date Range (ALL in HJ)
		or
		(cast(orm.order_date as date) between @CFStart and @CFEnd -- COFE Released Orders
	     and wcs_status in ('A', 'R', 'M', 'P', 'S', 'C')  --All Cofe
		--and wcs_status in ('A') --Cofe Pending
		--and wcs_status in ('R', 'M', 'P', 'S', 'C') --Cofe Active Pool
		--and wcs_status in ('M','S') --Cofe Matching
		)
	   )
		and orm.status NOT IN ('SHIPPED','CANCELLED','PACKED','LOADED','S', 'PROCESSING', 'SHIPPING')
		and orm.order_type in ('ECOM', 'SM', 'EO')
		) a1
group by item_number) a2
where order_qty - picked_qty > 0
		) a
     where
	 (bs_qty > 0 or scrb_qty > 0) -- Bulk locations qty check (SFS only or include RB/SEV)
	 and pm_qty - @proactive < (order_qty - picked_qty) -- Change qty to check for proactive
	  ) b
     join t_stored_item i (nolock) on i.item_number = b.item_number and i.type = '0'
	 AND (i.location_id LIKE @building1  or i.location_id like @building2) -- Bulk locations (SFS only or include RB/SEV)
	 ) c
	) d
where (CASE
     WHEN runningTotal + pm_qty + stg_qty - actual_qty < qty_needed THEN 'PULL'
	 WHEN runningTotal + pm_qty + stg_qty - actual_qty > qty_needed  THEN 'DELETE'
	 WHEN runningTotal + pm_qty + stg_qty - actual_qty = qty_needed THEN 'PULL'
    ELSE 'DELETE' END
   ) <> 'DELETE'
   ) e
join t_item_master m (nolock) on m.item_number = e.item_number
ORDER BY replen_status desc, e.item_number, rowNumber
​
END
